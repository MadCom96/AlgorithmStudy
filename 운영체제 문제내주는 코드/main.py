import random as r

def dg(aa):
    if ord(aa) >= ord('0') and ord(aa) <= ord('9'):
        return True
    else:
        return False

data = '//1.   사용자에게 편리한 인터페이스 환경을 제공하고\
 컴퓨터 시스템의 자원을 효율적으로 관리하는 소프트 \
웨어는 무엇인가?//운영체제//2.   가전제품과 같이 CPU의 성능이 낮고 메모리 크기도 작은 시스템에 내장하 \
도록 만든 운영체제를 무엇이라고 하는가?//임베디드  \
운영체제//3.   사용자가 원하는 기능을 수행하기 위해\
 컴퓨터 자원을 사용하는 소프트웨어는 무엇인가?//응 \
용프로그램 //4.   운영체제가 없는 컴퓨터에서는 어떤\
 문제가 발생하는지 설명하시오.//만들 당시에 구현한 \
기능 외에 다른 기능을 추가하거나 성능을 향상 시킬  \
수 없다.//5.   기계와 사용자 사이에 명령을 전달하고\
 처리한 결과를 알려주는 것을 무엇이라 하는가?//인터\
페이스//6.   프로그램과 데이터를 한번에 입력한 후  \
작업의 최종 결과만 얻는 운영체제 방식을 무엇이라 하\
는가?//일괄 작업 시스템//7.   프로그램이 진행되는  \
도중에 사용자로부터 데이터를 입력받아 프로그램 진행\
에 반영할 수 있는 운영체제 방식은 무엇인가?//대화형\
 시스템//8.   CPU사용시간을 쪼개어 여러 개의 프로그\
램이 동시에 실행되는 것처럼 보이는 운영체제 방식을 \
무엇이라 하는가?//시분할 시스템//9.   멀티프로그래 \
밍 수준은 동시에 실행되는 작업의 개수를 나타낸다.  \
멀티프로그래밍 수준이 1인 시스템을 무엇이라고 하는 \
가?//일괄 작업 시스템//10.   멀티프로그래밍 수준이 \
2보다 크거나 같은 시스템을 두개 이상 쓰시오.//다중 \
사용자 시스템, 시분할 시스템//11.   특정 작업이 일 \
정 시간 안에 처리되도록 보장하는 시스템을 무엇이라 \
고 하는가?//실시간 시스템//12.   작고 싼 컴퓨터를  \
네트워크로 묶어 대형 컴퓨터와 같은 일을 할 수 있도 \
록 만든 시스템을 무엇이라고 하는가?//분산 시스템//13.   서버 없이 말단 노드끼리 데이터를 주고받는 시스\
템을 무엇이라 하는가?//P2P시스템//14.   커널이 자신\
의 자원을 보호하기 위해 만든 함수의 집합을 무엇이라\
 하는가?//시스템 호출//15.   커널과 하드웨어 사이의\
 인터페이스를 무엇이라 하는가?//장치 드라이버//16. \
  커널의 핵심 기능을 구현하는 모듈들이 구분없이 하 \
나로 구성되어 있는 커널 구조를 무엇이라고 하는가?//단일형 커널 구조//17.   커널의 기능을 최소화하여 여\
러 컴퓨터에 이식하기 쉽게 만든 커널구조를 무엇이라 \
하는가?//마이크로 구조 터널//18.   서로 다른 운영체\
제에서 하나의 응용 프로그램으로도 작동할 수 있도록 \
만든 시스템을 무엇이라고 하는가?//가상 머신// ////1.   CPU의 구성에 대해 설명하시오//산술논리연산장치 \
: 산술연산과 AND, OR같은 논리 연산을 수행한다.//제 \
어장치 : CPU에서 작업을 지시하는 부분//레지스터 : CPU내에 데이터를 임시로 보관하는 곳//2.   폰노이만  \
구조의 가장 중요한 특징을 설명하시오.//모든 프로그 \
램은 메모리에 올라와야 실행될 수 있다.//3.   버스의\
 종류를 나열하시오.//제어 버스, 주소 버스, 데이터  \
버스//4.   단방향 버스에 대해 설명하시오.//자료가  \
한 방향으로 전달하는 버스이며, 주소 버스가 있다.//5.   다음에 실행할 명령어를 주소를 가지고 있는 레지 \
스터는 무엇인가?//프로그램 카운터(PC)//6.   다음에 \
실행할 명령어를 보관하는  레지스터는 무엇인가?//명 \
령어 레지스터(IR)//7.   메모리 주소를 보관하는 레지\
스터는 무엇인가?//메모리 주소 레지스터(MAR)//8.    \
메모리에 저장할 데이터나 메모리에서 가져온 데이터를\
 임시로 보관하는 레지스터는 무엇인가?//메모리 버퍼 \
레지스터(MBR)//9.   주소 버스와 연결되어 있는 레지 \
스터는 무엇인가?//메모리 주소 레지스터////10.   데 \
이터 버스와 연결되어 있는 레지스터는 무엇인가?//메 \
모리 버퍼 레지스터//11.   프로그램을 보호하기 위해 \
사용하는 두가지 레지스터는 무엇인가?//경계 레지스터\
, 한계 레지스터//12.   속도 차이가 나는 두 장치 사 \
이에서 속도를 완화하는 장치를 무엇이라고 통칭하는가\
?//버퍼//13.   응용 프로그램과 프린터 사이에서 속도\
 차이를 완화하는 소프트웨어를 무엇이라 하는가?//스 \
풀러//14.   부팅 시 운영체제를 메모리로 가져오기 위\
해 사용하는 작은 프로그램은 무엇인가?//부트 스트랩//15.   속도가 빠르고 값이 비싼 저장장치를 CPU 가까 \
운 쪽에 두고, 값이 싸고 용량이 큰 저장장치를 반대쪽\
에 배열하는 방식을 무엇이라고 하는가?//저장장치의  \
계층구조//16.   작업의 효율성을 높이기 위해 CPU가  \
입출력 관리자에게 입출력 작업을 요청하면 작업을 마 \
친 입출력 관리자는 CPU에 무엇을 보내는가?//인터럽트\
//17.   CPU의 도움없이도 메모리를 사용할 수 있도록 \
입출력 관리자에게 주는권한을 무엇이라 하는가?//직접\
 메모리 접근//18.   CPU와 입출력 관리자가 서로 다른\
 영역을 사용하는 기법을 무엇이라고 하는가?//메모리 \
매핑 입출력//19.   CPU가 병렬 처리를 지원하지 않을 \
때 소프트웨어적으로 병렬 처리를 하는 기법을 무엇이 \
라고 하는가?//VLIW 기법// //1.   프로그램이 프로세 \
스가 되려면 운영체제로부터 무엇을 받아야 하는가?// \
프로세스 제어 블록//2.   프로세스의 상태중 CPU를 할\
당받기 위해 기다리는 상태는 무엇인가?//준비 상태//3.   프로세스의 상태 중 입출력 작업을 하기 위해 이동\
하는 상태는 무엇인가?//대기 상태//4.   CPU 스케줄러\
가 준비 상태에 있는 프로세스 중 하나를 골라 CPU를  \
할당하는 작업을 무엇이라고 하는가?//디스패치//5.   \
실행 상태에서 하나의 프로세스가 나가고 새로운 프로 \
세스가 들어오는 상황을 무엇이라고 하는가?//문맥 교 \
환//6.   실행 중인 프로세스로부터 새로운 프로세스를\
 복사하는 시스템 호출은 무엇인가?//fork()//7.   프 \
로세스의 골격은 그대로 둔 채 코드 영역만 바꾸는 시 \
스템 호출은 무엇인가?//exec()//8.   부모 프로세스가\
 기다리지 않아 자원이 회수되지 못하고 계속 살아 있 \
는 프로세스는 무엇인가?//미아 프로세스//9.   프로세\
스의 코드에 정의된 절차에 따라 CPU에 작업 요청을 하\
는 실행 단위로서 가벼운 프로세스라고 불리는 것은 무\
엇인가?//스레드////10.   미아 프로세스를 방지하기  \
위해 부모 프로세스는 어떤 시스템 호출을 사용하는가?//wait()//11.   작업이 끝난 프로세스의 자원을 회수 \
하는 행위를 무엇이라고 하는가?//쓰레기 수집//12.   \
모든 프로세스를 부모-자식 관계로 만들어 자원 회수를\
 용이하게 하는 프로세스의 구조는 무엇인가?//프로세 \
스 계층 구조// ////1.   시스템 내 전체 프로세스의  \
수를 조절하는 것으로, 장기 스케줄링 또는 작업 스케 \
줄링이라고 불리는 스케줄링 수준은 무엇인가?//고수준\
 스케줄링//2.   어떤 프로세스에 CPU를 할당하고 어떤\
 프로세스를 대기 상태로 보낼지 등을 결정하는 스케줄\
링 수준은 무엇인가?//저수준 스케줄링//3.   어떤 프 \
로세스가 CPU를 할당받아 실행 중이더라도 운영체제가 \
CPU를 강제로 빼앗을 수 있는 스케줄링은 무엇인가?// \
선점형 스케줄링//4.   현재 입출력을 진행하는 프로세\
스로, 사용자와 상호작용이 가능하여 상호작용 프로세 \
스라고도 불리는 것은 무엇인가?//전면 프로세스//5.  \
 준비 큐에 도착한 순서대로 CPU를 할당하는 비선점형 \
스케줄링 알고리즘은 무엇인가?//FCFS 스케줄링//6.   \
준비 큐에 있는 프로세스 중 실행 시간이 가장 짧은 작\
업부터 CPU를 할당하는 비선점형 스케줄링 알고리즘은 \
무엇인가?//SJF 스케줄링//7.   SJF 스케줄링 알고리즘\
 단점으로 크기가 큰 작업이 계속 뒤로 밀리는 현상을 \
무엇이라 하는가?//아사 현상//8.   아사 현상을 해결 \
하는 방법을 설명하시오.//HRN스케줄링, 서비스를 받기\
 위해 기다린 시간과 CPU 사용시간을 고려하여 스케줄 \
링//////9.   서비스를 받기 위해 대기한 시간과 CPU  \
사용 시간을 고려하여 우선순위를 정하는 스케줄링 알 \
고리즘은 무엇인가?//HRN 스케줄링//10.   프로세스가 \
할당받은 시간(타임 슬라이스)동안 작업하다가 작업을 \
완료하지 못하면 준비 큐의 맨 뒤로 가서 다음 자기 차\
례가 올 때까지 기다리는 선점형 스케줄링 알고리즘 중\
 가장 단순한 것은 무엇인가?//라운드 로빈 방식//11. \
  타임 슬라이스의 크기와 문맥 교환의 관계를 설명하 \
시오.//우현피셜 답없음//12.   기본적으로 라운드 로빈 방식을 사용하\
지만, CPU를 할당받은 프로세스를 선택할 때 남아 있는\
 작업 시간이 가장 적은 것을 선택하는 스케줄링 알고 \
리즘은 무엇인가?//SRT 스케줄링//13.   우선순위에 따\
라 준비 큐를 여러 개 사용하여 고정형 우선순위를 적 \
용하는 스케줄링 알고리즘은 무엇인가?//다단계 큐 스 \
케줄링//14.   우선순위에 따라 준비 큐를 여러 개 사 \
용하며, 프로세스가 CPU를 사용한 후 우선순위가 낮아 \
지는 특성을 가진 스케줄링 알고리즘은 무엇인가?//다 \
단계 피드백 큐 스케줄링//15.   다단계 피드백 큐 스 \
케줄링에서 마지막 큐에 있는 프로세스(우선순위가 가 \
장 낮은 프로세스)의 타임 슬라이스 크기는 얼마인가?//무한대 //16.   다단계 피드백 큐 스케줄링에서 우선 \
순위가 낮아질수록 타임 슬라이스의 크기는 어떻게 변 \
하는가?//커진다//////17.   다단계 피드백 큐 스케줄 \
링에서 마지막 큐(우선순위가 가장 낮은 큐)는 어떤 스\
케줄링 알고리즘처럼 작동하는가?//FCFS 스케줄링 알고\
리즘// ////1.   프로세스 간 통신에서 데이터를 양방 \
향으로 전송 가능하지만 동시 전송은 불가능하고 특정 \
시점에 한쪽 방향으로만 전송할 수 있는 통신 방식은  \
무엇인가?//반 양방향 통신//2.   상태 변화를 살펴보 \
기 위해 반복문을 무한 실행하며 기다리는 것을 무엇이\
라 하는가?//바쁜 대기 //3.   프로세스 간 통신에서  \
대기가 없는 통신과 대기가 있는 통신의 예를 각각 제 \
시하시오.//대기가 있는 통신 : 소켓, 파이프//대기가 \
없는 통신 : 파일, 전역변수//4.   파이프를 이용하여 \
통신할 때 파이프를 2개 사용하는 이유는 무엇인가?// \
양방향 통신을 하기 위해서//5.   공유 자원을 병행적 \
으로 읽거나 쓰는 상황을 무엇이라 하는가?//경쟁조건 \
이 발생했다.//6.   공유 자원의 접근 순서에 따라 실 \
행 결과가 달라지는 프로그램의 영역은 무엇인가?//임 \
계구역//7.   임계구역 해결 조건 중 한 프로세스가 임\
계구역에 들어갔을 때 들어갔을 때 다른 프로세스는 임\
계구역에 들어갈 수 없는 조건을 무엇이라 하는가?//상\
호배제//8.   임계구역 해결 조건 중 한 프로세스가 다\
른 프로세스의 진행을 방해해서는 안된다는 조건을 무 \
엇이라 하는가?//진행의 융통성//9.   임계구역 문제를\
 하드웨어적으로 해결한 방식으로, 하드웨어의 지원을 \
받아 명령어를 실행하는 도중에 타임아웃이 걸리지 않 \
도록 하는 방식을 무엇이라 하는가?//Test and Set 방 \
식//10.   세마포어의 Semaphore(n)에서 n은 무엇을 가\
르키는가?//현재 사용가능한 자원의 수//11.   세마포 \
어에서 내부 변수를 RS라고 할 때 세마포어 P()의 내부\
 코드를 쓰시오.//If RS > 0 then RS = RS – 1;//else \
block();//12.   세마포어에서 내부변수를 RS라고 할  \
때 세마포어 V()의 내부 코드를 쓰시오.//RS = RS + 1;//wake_up();//13.   세마포어가 제대로 작동하지 않는\
 경우를 설명하시오.//(1) 프로세스가 세마포어를 사용 \
하지 않고 바로 임계구역에 들어간 경우 //(2) P()를 두\
 번 사용하여 wake_up 신호가 발생하지 않는 경우//(3) P()와\
 V()를 반대로 사용하여 상호 배제가 보장되지 않은 경\
우//14.   세마포어의 내부 코드도 타임아웃이 걸리면 \
문제가 발생할 수도 있다. 그래서 내부 코드는 무엇으 \
로 보호받는가?//검사와 지정//15.   공유 자원을 내부\
적으로 숨기고 공유자원에 접근하기 위한 인터페이스만\
 제공함으로써 자원을 보호하고 프로세스 간에 동기화 \
를 시키는 것으로, 세마포어의 단점을 해결하면서 임계\
구역 문제를 해결한 방식은 무엇인가?//모니터// ////1.   2개 이상의 프로세스가 서로 작업이 끝나기만 기다\
리며 작업을 더 이상 진행하지 못하는 상태를 무엇이라\
 하는가?//교착상태//2.   프로세스가 어떤 자원을 사 \
용 중이고 어떤 자원을 기다리고 있는지를 나타내는 방\
향성이 있는 그래프를 무엇이라 하는가?//자원할당 그 \
래프//3.   네가지 교착상태 필요조건에 대해 설명하시\
오.//상호배제 : 한 프로세스가 사용하는 자원은 다른 \
프로세스와 공유할 수 없는 배타적인 자원이어야 한다//비선점 : 한 프로세스가 사용중인 자원은 다른 프로세\
스가 빼앗을 수 없는 비선점 자원이어야 한다.//점유와\
 대기 : 프로세스가 어떤 자원을 할당 받은 상태에서  \
다른 자원을 기다리는 상태여야한다.//원형 대기 : 점 \
유와 대기를 하는 프로세스 간에 관계가 원을 이루어야\
 한다.//4.   교착 상태 해결 방법 중, 교착 상태를 유\
발하는 네가지 조건을 무력화 하는 방법은 무엇인가?//교착 상태 예방//5.   교착 상태 해결 방법 중, 교착  \
상태가 발생하지 않는 수준으로 자원을 할당하는 방법 \
은 무엇인가?//교착 상태 회피//6.   교착 상태 해결  \
방법 중, 자원 할당 그래프를 사용하여 교착 상태를 발\
견하는 방법은 무엇인가?//교착 상태 검출//7.   교착 \
상태 해결 방법 중, 타임아웃을 이용하여 해결하는 방 \
법은 무엇인가?//교착 상태 검출//8.   교착 상태 해결\
 방법 중, 은행원 알고리즘을 사용하여 해결하는 방법 \
은 무엇인가?//교착 상태 회피//9.   교착 상태 해결  \
방법 중, 모든 자원에 번호를 부여하고 낮은 번호의 자\
원을 사용할 수 없도록 하는 방법은 무엇인가?//원형대\
기 예방//10.   교착상태 해결 방법 중, 프로세스가 시\
작 초기에 자신을 이용하려는 모든 자원을 한꺼번에 점\
유하거나, 그렇지 못할 경우 자원을 모두 반납하는 방 \
법은 무엇인가?//점유와 대기 예방//11.   교착 상태  \
해결 방법 중, 교착상태가 검출되면 교착상태를 일으킨\
 모든 프로세스를 종료하는 방법은 무엇인가?//교착 상\
태 회복//12.   자원 할당 그래프에서 무엇이 발견되면\
 교착상태라고 판단할 수 있는가?//사이클// ////1.   \
소스코드를 한번에 번역하지 않고 한 행씩 번역하여 실\
행하는 방식을 무엇이라 하는가?//인터프리터 방식//2.   프로그래머가 C나 자바로 소스코드를 작성하여 컴파\
일하면 일차적으로 만들어지는 코드는 무엇인가?//목적\
코드//3.   컴파일할때 코드에 라이브러리를 연결하지 \
않고 코드를 실행할 때 라이브러리를 가져와 실행하는 \
방식을 무엇이라 하는가?//동적 라이브러리//4.   메모\
리 관리 정책 중 메모리가 꽉 찼을 때 메모리에 있는  \
어떤 프로세스를 내보낼지 결정하는 것은 무엇인가?// \
재배치 정책//5.   32bit CPU를 사용하는 컴퓨터가 가 \
질 수 있는 물리 메모리의 최대 크기는 얼마인가?//=4GB//6.   절대 주소는 실제 물리 주소로, 메모리 관리자 \
입장에서 바라본 주소이다. 절대 주소와 관계 없이 사 \
용자 입장에서 항상 0번지부터 시작하는 주소는 무엇인\
가?//상대 주소//7.   상대 주소를 절대 주소로 변환할 때 사용하 \
는 레지스터는 무엇인가?//재배치 레지스터//8.   프로\
세스의 크기가 물리 메모리보다 클 때 전체 프로세스를\
 메모리로 가져오는 대신 적당한 크기로 잘라서 가져오\
는 기법은 무엇인가?//메모리 오버레이//9.   메모리  \
영역이 부족해서 쫓겨난 프로세스를 보관하는 저장장치\
의 특별한 공간은 무엇인가?//스왑영역 //10.   가변  \
분할 방식에서 사용하지 못하는 작은 메모리 공간이   \
발생하는 현상을 무엇이라 하는가?//외부 단편화//11. \
  고정 분할 방식에서 똑같이 나누어진 메모리 공간에 \
작은 조각이 발생하는 현상을 무엇이라 하는가?//내부 \
단편화//12.   가변 분할 방식의 메모리 배치 방식 중 \
프로세스를 배치하기에 적당한 공간 가운데 가장 작은 \
공간에 배치하는 방식은 무엇인가?//최적 배치//13.   \
가변 분할 방식의 메모리 배치 방식 중 첫번째로 발견 \
한 빈 공간에 프로세스를 배치하는 방식은 무엇인가?//최초 배치//14.   가변 분할 방식의 메모리 배치 방식 \
중 가장 큰 공간에 프로세스를 배치하는 방식은 무엇인\
가?//최악 배치//15.   가변 분할 방식에서 서로 떨어 \
진 여러 개의 빈 공간을 합치는 작업을 무엇이라 하는 \
가?//조각 모음//16.   메모리 분할 방식 중 프로세스 \
의 크기에 맞도록 1/2 크기로 잘라가면서 메모리를 나 \
누어주는 방식은 무엇인가?//버디 시스템 방식// ////1.   가상 메모리에서 관리자가 사용할 수 있는 전체 크\
기는 어떻게 결정되는가?//물리 메모리와 스왑 영역을 \
합한 크기로 결정된다.//2.   가상 주소에서 하나의 프\
로세스가 사용할 수 있는 최대 주소는 무엇과 연관이  \
있는가?//물리 메모리//3.   가상 메모리에서 가상 주 \
소를 물리 주소로 변환하기 위해 사용하는 자료 구조를\
 무엇이라 하는가?//페이징 기법의 주소 변환, 세그먼 \
테이션 기법의 주소 변환//4.   페이징 기법의 주소 변\
환 과정식을 쓰시오.//VA =<P,D> -> PA = <F,D>//5.   \
페이지 테이블에서 각각의 한 줄을 무엇이라 하는가?//페이지//6.   가상 주소를 <P,D>로 변환하는 공식을 쓰\
시오.//P = [가상 주소/한 페이지 크기] 몫, D = [가상\
 주소/한 페이지 크기] 나머지//7.   각 페이지 테이블\
의 시작 주소를 가지고 있는 레지스터는 무엇인가?//페\
이지 테이블 기준 레지스터//8.   페이지 테이블 매핑 \
방식 중, 모든 테이블을 스왑 영역에 저장하고 그 중  \
일부만 물리 메모리에 무작위로 가지고 있는 방식은 무\
엇인가?//연관 매핑//9.   페이지 테이블 매핑 방식 중\
, 모든 페이지 테이블을 물리 메모리에 보관하는 방식 \
은 무엇인가?//직접 매핑//////10.   페이지 테이블 매\
핑 방식 중, 모든 페이지 테이블을 스왑 영역에 저장하\
고 페이지 테이블을 일정한 집합 단위로 물리 메모리에\
 보관하는 방식은 무엇인가?//집합-연관 매핑//11.    \
페이지 테이블 매핑 방식 중, 물리 메모리의 프레임 번\
호를 기준으로 테이블을 구성하는 방식은 무엇인가?// \
역매핑//12.   연관 매핑에서 사용하는 테이블의 이름 \
은 무엇인가?//변환 색인 버퍼, 연관 레지스터//13.   \
연관 매핑에서 원하는 데이터가 변환 색인 버퍼에 없는\
 상태를 무엇이라 하는가?//TLB 미스//14.   연관 매핑\
에서는 전체 매핑 테이블을 어디에 보관하는가?//스왑 \
영역//15.   가상 메모리에서 메모리 관리자는 물리 메\
모리 영역과 스왑 영역을 합쳐서 프로세스가 사용하는 \
가상 주소를 실제 메모리의 물리 주소로 변환한다. 이 \
러한 작업을 무엇이라 하는가?//동적 주소 변환//16.  \
 사용자 프로세스가 자신의 크기보다 더 큰 주소에 접 \
근하려고 하면 메모리 관리자는 그 프로세스를 강제 종\
료한다. 이때 발생하는 오류를 무엇이라 하는가?//트랩\
//17.   세그먼테이션-페이징 혼용 기법에서는  접근  \
권한을 어디에서 관리하는가?//세그먼테이션 테이블// //1.   메모리 가져오기 정책 중, 사용자가 요구할 때, 해당 페이지를 메모리로 가져오는 방식은 무엇인가?//요구 페이징//2.   요구 페이징과 반대로 앞으로 필요 \
할 것이라고 예상되는 페이지를 미리 가져오는 방식은 \
무엇인가?//미리 가져오기 방식(캐시)//3.   페이지 테\
이블 엔트리의 구조 중, 페이지가 실제 메모리에 있는 \
지 나타내는 비트는 무엇인가?//유효 비트(현재 비트)//4.   페이지 테이블 엔트리의 구조 중, 페이지가 메모\
리에 올라온 후 사용한 적이 있는지 알려주는 비트는  \
무엇인가?//접근 비트(참조 비트)//5.   페이지 테이블\
 엔트리의 구조 중, 페이지가 메모리에 올라온 후 데이\
터의 변경이 있었는지 알려주는 비트는 무엇인가?//변 \
경 비트(더티 비트)//6.   프로세스가 페이지를 요청했\
을 때 해당 페이지가 메모리에 없는 상황을 무엇이라  \
하는가?//페이지 부재//7.   기억장치에 접근하는 패턴\
이 메모리 전체에 고루 분포되는 것이 아니라 특정 영 \
역에 집중되어 있는 성질을 무엇이라 하는가?//지역성//8.   처음으로 메모리에 올라온 페이지 스왑 영역으로\
 보내는 페이지 교체 알고리즘은 무엇인가?//FIFO 페이\
지 교체 알고리즘////9.   미래의 접근 패턴을 기준으 \
로 대상 페이지를 선정하여 스왑 영역으로 보내는 방식\
으로, 실제로 구현이 불가능한 페이지 교체 알고리즘은\
 무엇인가?//최적 페이지 교체 알고리즘//10.   시간적\
으로 멀리 떨어진 페이지를 스왑영역으로 보내는 페이 \
지 교체 알고리즘은 무엇인가?//LRU 페이지 교체 알고 \
리즘//11.   사용 빈도가 적은 페이지를 스왑 영역으로\
 보내는 페이지 교체 알고리즘은 무엇인가?//LFU 페이 \
지 교체 알고리즘//12.   최근에 사용한 적이 없는 페 \
이지를 스왑 영역으로 보내는 페이지 교체 알고리즘은 \
무엇인가?//NUR 페이지 교체 알고리즘//13.   FIFO 변 \
현 페이지 교체 알고리즘 중, 성공한 페이지를 큐의 맨\
 뒤로 옮김으로써 기회를 한번 더 주는 페이지 교체 알\
고리즘은 무엇인가?// =2차 기회 페이지 교체 알고리즘//14.   FIFO 변형 페이지 교체 알고리즘 중, 대상 페이 \
지를 가리키는 포인터를 사용하여 포인터가 큐의 맨 바\
닥으로 내려가면 다음에 다시 큐의 처음을 가리키게 하\
는 페이지 교체 알고리즘은 무엇인가?//시계 알고리즘//15.   하드디스크의 입출력이 많아져서 잦은 페이지  \
부재로 작업이 거의 멈춰버린 상태를 무엇이라 하는가?//스레싱//16.   동적 프레임 할당 방식 중, 최근 일정\
 시간 동안 참조된 페이지를 집합으로 유지하고 이 집 \
합에 있는 페이지들을 물리 메모리에 유지하는 것은 무\
엇인가?//작업 집합 모델////17.   동적 프레임 할당  \
방식 중, 페이지 부재 비율의 상한선과 하한선을 설정 \
하고 페이지 부재 비율이 상한선을 초과하면 할당 프레\
임을 늘려주는 것은 무엇인가?//페이지 부재 빈도// ////1.   전원 이상이나 기계적인 오류 때문에 발생하는 \
인터럽트는 무엇인가?//외부 인터럽트//2.   숫자를 0 \
으로 나누거나 자신의 주소  공간을 벗어나서 작업을  \
하는 것과 같이 프로세스의 오류와 관련된 인터럽트는 \
무엇인가?//내부 인터럽트//3.   자발적 인터럽트로서 \
사용자의 의지로 발생시키는 인터럽트는 무엇인가?//시\
그널//4.   인터럽트의 처리 방법을 함수로 만들어놓은\
 것을 무엇이라 하는가?//인터럽트 핸들러//5.   하드 \
디스크에서 사용하는 방식으로, 디스크가 일정 속도로 \
회전하며 모든 트랙의 섹터 개수가 같고 섹터의 크기가\
 각각 다른 방식은 무엇인가?//각속도 일정방식의 회전\
//6.   CD에서 사용하는 방식으로, 어느 트랙이나 시간\
당 디스크 이동 거리가 같고 섹터의 크기가 일정한 방 \
식은 무엇인가?//선속도 일정방식의 회전//7.   하드디\
스크 장치의 데이터 전송 시간 중, 현재 위치에서 원하\
는 트랙까지 이동하는 데 걸리는 시간을 무엇이라 하는\
가?//탐색시간//8.   하드디스크 장치의 데이터 전송  \
시간 중, 디스크가 회전하여 원하는 섹터를 만날 때까 \
지 걸리는 시간을 무엇이라 하는가?//회전 지연 시간//9.   네트워크 저장장치 중 저장장치를 네트워크 상에 \
두고 여러 클라이언트가 네트워크를 통해 접근함으로써\
 공유 데이터의 관리 데이터의 중복 회피가 가능한 기 \
법은 무엇인가?//NAS(Network Attached Storage)//10. \
  현재 헤드가 있는 위치에서 가장 가까이 있는 트랙부\
터 서비스하는 디스크 스케줄링 기법은 무엇인가?//SSTF 디스크 스케줄링 기법//11.   서비스를 요청한 트랙 \
을 일정 단위로 묶어 SSTF 방식으로 서비스하는 디스크\
 스케줄링 기법은 무엇인가?//블록 SSTF 디스크 스케줄\
링//12.   헤드가 움직이기 시작하면 맨 마지막 트랙에\
 도착할 때까지 뒤돌아가지 않고 계속 앞으로 전진하는\
 디스크 스케줄링 기법은 무엇인가?//SCAN 디스크 스케\
줄링 기법//13.   헤드가 한쪽으로만 움직이지만 더 이\
상 서비스할 트랙이 없으면 끝까지 가지 않고 중간에서\
 방향을 바꾸는 디스크 스케줄링 기법은 무엇인가?//LOOK 디스크 스케줄링 방식//14.   장애 발생 시 복구하 \
는 기능은 없으나 입출력 속도를 높이기 위해 사용하는\
 RAID방식의 번호는 무엇인가?//RAID 0 (스트라이핑)//15.   RAID 1(미러링)에서 추가로 필요한 디스크의 개 \
수는 원본 디스크의 몇 배인가?//짝수배//16.   미러링\
과 스트라이핑을 결합한 RAID 방식의 번호는 무엇인가?//RAID 10// ////1.   파일을 사용할 때 운영체제로부 \
터 부여받은 접근 권한을 무엇이라 하는가?//파일 디스\
크립터//2.   파일 구조 중 처음부터 순서대로 접근하 \
는 구조는 무엇인가?//순차 파일 구조//3.   파일 구조\
 중 순차 접근과 직접 접근이 모두 가능한 구조는 무엇\
인가?//인덱스 파일 구조//4.   저장하려는 데이터의  \
특정 값에 어떤 관계를 정의하여 물리적인 주소로 바로\
 변환하는 파일 구조는 무엇인가?//직접 파일 구조//5.   직접 파일 구조에서 데이터 변환에 사용하는 함수는\
 무엇인가?//해시 함수//6.   파일이 전체 디렉터리 가\
운데 어느 위치에 있는지 나타내는 정보는 무엇인가?//경로//7.   루트 디렉터리를 기준으로 정하는 경로와  \
현재 디렉터리를 기준으로 정하는 경로를 각각 무엇이 \
라 하는가?//절대 경로, 상대 경로//8.   여러 개로 나\
뉜 파티션을 하나로 묶는 명령어는 무엇인가?//마운트//9.   디스크 할당 방식에서 파일에 속한 데이터를 연 \
결 리스트로 관리하는 방식은 무엇인가?//연결 할당//10.   윈도우의 FAT는 어떤 파일 할당 방식을 사용하는 \
가?//연결 할당 방식//11.   디스크 할당 방식에서 데 \
이터의 인덱스를 담고 있는 인덱스 블록끼리 연결하여 \
최대 할당 크기의 제약이 없는 방식은 무엇인가?//인덱\
스 할당 방식//12.   유닉스 I-done는 어떤 할당방식을\
 사용하는가?//인덱스 할당 방식//13.   디스크의 빈  \
공간을 관리하기 위해 사용하는 자료 구조는 무엇인가?//빈 공간 리스트//14.   빈 공간 리스트에서 방금 지 \
워진 파일은 리스트의 어느 쪽에 추가되는가?//리스트 \
에 있던 블록 중 맨 앞에 있는 블록에 추가// ////1.  \
 네트워크로 연결된 모든 컴퓨터의 프로세서가 하나의 \
메모리를 공유하는 네트워크 구성 방식은 무엇인가?// \
강결합 시스템//2.   서로 다른 기기 간의 통신을 하기\
 위해 정한 약속을 무엇이라 하는가?//프로토콜//3.   \
가까운 거리를 연결하는 네트워크를 무엇이라 하는가?//LAN//4.   LAN의 구조를 뜻하는 영어 단어는 무엇인가\
?//Topology(토폴로지)//5.   버스 토폴로지에 데이터 \
전송을 위한 프로토콜로 CSMA/CD를 사용하는 LAN은 무 \
엇인가?//이더넷//6.   완전한 분산 시스템은 구성하는\
 데 문제가 많아 작업을 요청하는 컴퓨터와 이를 처리 \
하는 컴퓨터의 이중 구조로 나눈다. 이러한 분산 시스 \
템을 무엇이라 하는가?//클라이언트/서버 시스템 구조//7.   클라이언트/서버 시스템의 서버 과부하 문제를  \
해결한 시스템으로, 데이터 전송 시 서버를 거치지 않 \
고 사용자 간에 직접 이루어진 시스템은 무엇인가?//P2P시스템//8.   평상시에 대기 상태를 유지하다가 가동 \
시스템의 하드웨어 또는 네트워크 장비에 장애가 발생 \
하면 가동 시스템의 자원을 백업 시스템으로 이전하여 \
서비스가 중단되지 않도록 하는 고가용성 시스템은 무 \
엇인가?//상시 대기//9.   2개의 시스템이 각각의 고유\
 서비스를 수행하다가 한쪽 시스템에 장애가 발생하면 \
상대 시스템으로 작업을 이동하는 고가용성 시스템은  \
무엇인가?//상호 인계//'#우현이 정리파일에서 복붙

data = data.split('//')
moonjae = []

t = []

for a in data:
    if a != '' and dg(a[0]):
        moonjae.append(t)
        t = []
        t.append(a)
    else:
        if a =='끝':
            print("추가완료")
            moonjae.append(t)
            print(moonjae)
            break
        else:
            t.append(a)
                
while True:    
    m = r.randrange(1, len(moonjae))
    print(moonjae[m][0])
    input()
    for a in moonjae[m][1:]:
        print(a)
    print('\n')